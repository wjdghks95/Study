<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <tx:annotation-driven /> <!-- @Transactional이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록 -->
    <context:annotation-config /> <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
<!--        <jdbc:script location="classpath:/schema.sql"/>-->
        <jdbc:script location="classpath:/sqlRegistrySchema.sql"/>
    </jdbc:embedded-database>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/testdb"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <bean id="userDao" class="com.example.springapplication.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
        <property name="sqlService" ref="sqlService"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlReader" class="com.example.springapplication.JaxbXmlSqlReader">
        <property name="sqlmapFile" value="/sqlmap.xml"/>
    </bean>

<!--    <bean id="sqlRegistry" class="com.example.springapplication.HashMapSqlRegistry"/>-->

<!--    <bean id="sqlService" class="com.example.springapplication.BaseSqlService">-->
<!--        <property name="sqlRegistry" ref="sqlRegistry"/>-->
<!--        <property name="sqlReader" ref="sqlReader"/>-->
<!--    </bean>-->

<!--    <bean id="sqlRegistry" class="com.example.springapplication.ConcurrentHashMapSqlRegistry"/>-->

    <bean id="sqlRegistry" class="com.example.springapplication.EmbeddedDbSqlRegistry">
        <property name="dataSource" ref="embeddedDatabase"/>
    </bean>

<!--    <bean id="sqlAdminService" class="com.example.springapplication.SqlAdminService">-->
<!--        <property name="updatableSqlRegistry" ref="sqlRegistry"/>-->
<!--    </bean>-->

<!--    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">-->
<!--        <property name="contextPath" value="com.example.springapplication"/>-->
<!--    </bean>-->
<!--    <bean id="unmarshaller" class="org.springframework.oxm.castor.CastorMarshaller">-->
<!--        <property name="mappingLocation" value="/mapping.xml"/>-->
<!--    </bean>-->

    <bean id="sqlService" class="com.example.springapplication.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller"/>
        <property name="sqlRegistry" ref="sqlRegistry"/>
        <!--        <property name="sqlmap" value="classpath:sqlmap.xml"/> --> <!-- classpath:는 디폴트이므로 생략 가능하다. 클래스패스 위치를 지정할 때는 클래스패스 루트부터 절대위치를 적어야한다.  -->
        <!--        <property name="sqlmap" value="file:/..."/> file:을 사용하면 파일 시스템의 루트 디렉토리로붵 시작하는 파일의 위치를 나타낸다. -->
        <!--        <property name="sqlmap" value="http:/.."/> http 프로토콜로 접근 가능한 웹 리소스를 가져올 수도 있다. -->
    </bean>

    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="com.example.springapplication"/>
    </bean>
</beans>