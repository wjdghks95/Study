<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <tx:annotation-driven /> <!-- @Transactional이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록 -->
    <context:annotation-config /> <!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/testdb"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <bean id="userDao" class="com.example.springapplication.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
<!--        <property name="sqlAdd" value="insert into users(id, name, password, email, level, login, recommend) values (?, ?, ?, ?, ?, ?, ?)"/>-->
        <property name="sqlService" ref="sqlService"/>
    </bean>

<!--    <bean id="sqlService" class="com.example.springapplication.SimpleSqlService">-->
<!--        <property name="sqlMap">-->
<!--            <map>-->
<!--                <entry key="userAdd" value="insert into users(id, name, password, email, level, login, recommend) values (?, ?, ?, ?, ?, ?, ?)"/>-->
<!--                <entry key="userGet" value="select * from users where id = ?"/>-->
<!--                <entry key="userGetAll" value="select * from users order by id"/>-->
<!--                <entry key="userDeleteAll" value="delete from users"/>-->
<!--                <entry key="userGetCount" value="select count(*) from users"/>-->
<!--                <entry key="userUpdate" value="update users set name = ?, password = ?, level = ?, login = ?, recommend = ?, email = ? where id = ?"/>-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="sqlService" class="com.example.springapplication.XmlSqlService">-->
<!--        <property name="sqlmapFile" value="/sqlmap.xml"/>-->
<!--        <property name="sqlReader" ref="sqlService"/>-->
<!--        <property name="sqlRegistry" ref="sqlService"/>-->
<!--    </bean>-->

<!--    <bean id="sqlService" class="com.example.springapplication.BaseSqlService">-->
<!--        <property name="sqlReader" ref="sqlReader"/>-->
<!--        <property name="sqlRegistry" ref="sqlRegistry"/>-->
<!--    </bean>-->

    <bean id="sqlService" class="com.example.springapplication.DefaultSqlService">
<!--        <property name="sqlRegistry" ref="ultraSuperFastRegistry"/>-->
    </bean>

    <bean id="sqlReader" class="com.example.springapplication.JaxbXmlSqlReader">
        <property name="sqlmapFile" value="/sqlmap.xml"/>
    </bean>

    <bean id="sqlRegistry" class="com.example.springapplication.HashMapSqlRegistry"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>