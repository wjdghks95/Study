# 새싹
""" 
문제
아래 예제와 같이 새싹을 출력하시오.

입력
입력은 없다.

출력
새싹을 출력한다.
"""
print('         ,r\'"7\nr`-_   ,\'  ,/\n \\. ". L_r\'\n   `~\\/\n      |\n      |')




# 킹, 퀸, 룩, 비숍, 나이트, 폰
""" 
문제
동혁이는 오래된 창고를 뒤지다가 낡은 체스판과 피스를 발견했다.
체스판의 먼지를 털어내고 걸레로 닦으니 그럭저럭 쓸만한 체스판이 되었다. 하지만, 검정색 피스는 모두 있었으나, 흰색 피스는 개수가 올바르지 않았다.
체스는 총 16개의 피스를 사용하며, 킹 1개, 퀸 1개, 룩 2개, 비숍 2개, 나이트 2개, 폰 8개로 구성되어 있다.
동혁이가 발견한 흰색 피스의 개수가 주어졌을 때, 몇 개를 더하거나 빼야 올바른 세트가 되는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 동혁이가 찾은 흰색 킹, 퀸, 룩, 비숍, 나이트, 폰의 개수가 주어진다. 이 값은 0보다 크거나 같고 10보다 작거나 같은 정수이다.

출력
첫째 줄에 입력에서 주어진 순서대로 몇 개의 피스를 더하거나 빼야 되는지를 출력한다. 
만약 수가 양수라면 동혁이는 그 개수 만큼 피스를 더해야 하는 것이고, 음수라면 제거해야 하는 것이다.
"""
chess =[1, 1, 2, 2, 2, 8]
find = list(map(int, input().split()))
result = list()
for i in range(len(chess)):
    result.append(chess[i] - find[i])
print(*result)



# 별 찍기 - 7
""" 
문제
예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.

입력
첫째 줄에 N(1 ≤ N ≤ 100)이 주어진다.

출력
첫째 줄부터 2×N-1번째 줄까지 차례대로 별을 출력한다.
"""
N = int(input())
for i in range(1, N+1):
    print(' ' * (N-i), end='')
    print('*' * (i*2-1))
for i in range(N-1, 0, -1):
    print(' ' * (N-i), end='')
    print('*' * (i*2-1))



# 팰린드롬인지 확인하기
""" 
문제
알파벳 소문자로만 이루어진 단어가 주어진다. 이때, 이 단어가 팰린드롬인지 아닌지 확인하는 프로그램을 작성하시오.
팰린드롬이란 앞으로 읽을 때와 거꾸로 읽을 때 똑같은 단어를 말한다. 
level, noon은 팰린드롬이고, baekjoon, online, judge는 팰린드롬이 아니다.

입력
첫째 줄에 단어가 주어진다. 단어의 길이는 1보다 크거나 같고, 100보다 작거나 같으며, 알파벳 소문자로만 이루어져 있다.

출력
첫째 줄에 팰린드롬이면 1, 아니면 0을 출력한다.
"""
str = input()
"""
a = list(str)
b = a.copy()
b.reverse()
if ("".join(a) == "".join(b)):
    print(1)
else:
    print(0)
"""
if text == text[::-1]:
    print(1)
else:
    print(0)



# 단어 공부
""" 
문제
알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.

입력
첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.

출력
첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.
"""
text = input().upper()
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
arr = []
for a in alphabet:
    arr.append(text.count(a))
max = max(arr)
maxIndex = arr.index(max)
result = alphabet[maxIndex]

arr.remove(max)
for i in arr:
    if (max == i):
        result = '?'
        break

print(result)